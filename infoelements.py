import traceback as tb
elemIds = {0: 'SSID',
1: 'Supported Rates and BSS Membership Selectors',
2: 'Reserved',
3: 'DSSS Parameter Set',
4: 'CF Parameter Set',
5: 'TIM',
6: 'IBSS Parameter Set',
7: 'Country',
8: 'Reserved',
9: 'Reserved',
10: 'Request',
11: 'BSS Load',
12: 'EDCA Parameter Set',
13: 'TSPEC',
14: 'TCLAS',
15: 'Schedule',
16: 'Challenge text',
32: 'Power Constraint',
33: 'Power Capability',
34: 'TPC Request',
35: 'TPC Report',
36: 'Supported Channels',
37: 'Channel Switch Announcement',
38: 'Measurement Request',
39: 'Subelements, for Measurement Report',
40: 'Subelements, for Quiet',
41: 'IBSS DFS',
42: 'ERP',
43: 'TS Delay',
44: 'TCLAS Processing',
45: 'HT Capabilities',
46: 'QoS Capability',
47: 'Reserved',
48: 'RSN',
49: 'Reserved',
50: 'Extended Supported Rates and BSS Membership Selectors',
51: 'AP Channel Report',
52: 'Neighbor Report',
53: 'RCPI',
54: 'Mobility Domain (MDE)',
55: 'Fast BSS Transition (FTE)',
56: 'Timeout Interval',
57: 'RIC Data (RDE)',
58: 'DSE Registered Location',
59: 'Supported Operating Classes',
60: 'Extended Channel Switch Announcement',
61: 'HT Operation',
62: 'Secondary Channel Offset',
63: 'BSS Average Access Delay',
64: 'Antenna',
65: 'RSNI',
66: 'Measurement Pilot Transmission',
67: 'BSS Available Admission Capacity',
68: 'BSS AC Access Delay',
69: 'Time Advertisement',
70: 'RM Enabled Capabilities',
71: 'Multiple BSSID',
72: '20/40 BSS Coexistence',
73: '20/40 BSS Intolerant Channel Report',
74: 'Overlapping BSS Scan Parameters',
75: 'RIC Descriptor',
76: 'Management MIC',
78: 'Event Request',
79: 'Event Report',
80: 'Diagnostic Request',
81: 'Diagnostic Report',
82: 'Location Parameters',
83: 'Nontransmitted BSSID Capability',
84: 'SSID List',
85: 'Multiple BSSID-Index',
86: 'FMS Descriptor',
87: 'FMS Request',
88: 'FMS Response',
89: 'QoS Traffic Capability',
90: 'BSS Max Idle Period',
91: 'TFS Request',
92: 'TFS Response',
93: 'WNM Sleep Mode',
94: 'TIM Broadcast Request',
95: 'TIM Broadcast Response',
96: 'Collocated Interference Report',
97: 'Channel Usage',
98: 'Time Zone',
99: 'DMS Request',
100: 'DMS Response',
101: 'Link Identifier',
102: 'Wakeup Schedule',
104: 'Channel Switch Timing',
105: 'PTI Control',
106: 'TPU Buffer Status',
107: 'Interworking',
108: 'Advertisement Protocol',
109: 'Expedited Bandwidth Request',
110: 'QoS Map',
111: 'Roaming Consortium',
112: 'Emergency Alert Identifier',
113: 'Mesh Configuration',
114: 'Mesh ID',
115: 'Mesh Link Metric Report',
116: 'Congestion Notification',
117: 'Mesh Peering Management',
118: 'Mesh Channel Switch Parameters',
119: 'Mesh Awake Window',
120: 'Beacon Timing',
121: 'MCCAOP Setup Request',
122: 'MCCAOP Setup Reply',
123: 'MCCAOP Advertisement',
124: 'MCCAOP Teardown',
125: 'GANN',
126: 'RANN',
127: 'Extended Capabilities',
130: 'PREQ',
131: 'PREP',
132: 'PERR',
137: 'PXU',
138: 'PXUC',
139: 'Authenticated Mesh Peering Exchange',
140: 'MIC',
141: 'Destination URI',
142: 'U-APSD Coexistence',
143: 'DMG Wakeup Schedule',
144: 'Extended Schedule',
145: 'STA Availability',
146: 'DMG TSPEC',
147: 'Next DMG ATI',
148: 'DMG Capabilities',
151: 'DMG Operation',
152: 'DMG BSS Parameter Change',
153: 'DMG Beam Refinement',
154: 'Channel Measurement Feedback',
157: 'Awake Window',
158: 'Multi-band',
159: 'ADDBA Extension',
160: 'NextPCP List',
161: 'PCP Handover',
162: 'DMG Link Margin',
163: 'Switching Stream',
164: 'Session Transition',
165: 'Dynamic Tone Pairing Report',
166: 'Cluster Report',
167: 'Relay Capabilities',
168: 'Relay Transfer Parameter Set',
169: 'BeamLink Maintenance',
170: 'Multiple MAC Sublayers',
171: 'U-PID',
172: 'DMG Link Adaptation Acknowledgment',
173: 'Reserved',
174: 'MCCAOP Advertisement Overview',
175: 'Quiet Period Request',
176: 'Reserved',
177: 'Quiet Period Response',
181: 'QMF Policy',
182: 'ECAPC Policy',
183: 'Cluster Time Offset',
184: 'Intra-Access Category Priority',
185: 'SCS Descriptor',
186: 'QLoad Report',
187: 'HCCA TXOP Update Count',
188: 'Higher Layer Stream ID',
189: 'GCR Group Address',
190: 'Antenna Sector ID Pattern',
191: 'VHT Capabilities',
192: 'VHT Operation',
193: 'Extended BSS Load',
194: 'Wide Bandwidth Channel Switch',
195: 'Transmit Power Envelope',
196: 'Channel Switch Wrapper',
197: 'AID',
198: 'Quiet Channel',
199: 'Operating Mode Notification',
200: 'UPSIM',
201: 'Reduced Neighbor Report',
202: 'TVHT Operation',
203: 'Reserved',
204: 'Device Location',
205: 'White Space Map',
206: 'Fine Timing Measurement Parameters',
221: 'Vendor Specific',
255: 'Need to parse Extension Fields'}


class Element(object):
    def __init__(self,data):        
        Element.mapID(data[:2])
        Element.info_elements(data[2:])

    @staticmethod
    def mapID(data):
        #b0: set to 1 to indicate the device capabilities only apply to the specified NAN Availability map. set to 0 to indicate the device capabilities apply to the device, when no NAN Availability map is included in the same frame, or apply to all NAN Availability maps included in the same frame.
        #b1-b4: indicate the NAN Availability map associated with the device capabilities; and reserved when b0 is set to 0.
        if '{:08b}'.format(int(data,16))[7] == 1:
            print '\tmapID==1 device capabilities only apply to the specified NAN Availability map'
        else:
            print '\tmapID==0 device capabilities apply to the device'

    @staticmethod
    def info_elements(data):    
        #802.11-2016 9.4.2 Elements
        try:
            EID = int(data[:2],16)
            length = int(data[2:4],16)
            print ('\t{}'.format(elemIds[EID]))
            print ('\t\tlength: {}'.format(length))
            print ('\t\tRaw Data: {}'.format(data[4:(4+length*2)]))
            if not (2*length) == (len(data)-4):                
                #end condition data length in octets left matches array length minus header data 
                Element.info_elements(data[4+(length*2):])
            else:
                #print 'END CONDITION MET'
                return
        except KeyError:
            pass
        except Exception:
            pass
            #print tb.format_exc()
        
